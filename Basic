Props vs State
props: all about communicating data from parent to child
state:tracking a single piece of data that whenever changes we want to update what appears on screens


hook: hook is a fxn that adds a new fxnality to a funcitonality component.

A project can be generated using twi cmd line tools:
expo-cli
react-native cli


inside cmd: npx expo-cli init food

React Navigation: vid 84
to install react navigator : npm install react navigation



LECTURE 85:
React Navigation Fix
React Navigation has changed a bit since their recent v.4.0.0 release:

https://github.com/react-navigation/react-navigation/releases/tag/v4.0.0

We must now install three libraries separately. In your terminal run the following command:

npx expo-cli install react-native-gesture-handler react-native-reanimated react-navigation-stack

Our imports in the upcoming lecture will now look like this:

import { createAppContainer } from 'react-navigation';
import { createStackNavigator } from 'react-navigation-stack';


TO install a screen make a new folder src/srcreens


to use an icon in an expo-cli project check for expo/vector-icons search for the symbol and use it as 
import {Feather} from '@expo/vector-icons';
inside jsx  <Feather name='search' size={30}/>



Anytime we want a make a network request from react native app we have many options: two of these are
1. fetch
2. axios

to insall axios

*/////////////any netwrok request is async operation.*///////////////
SEE LECTURE 95


We use useEffect hook to allow some piece of code to run only once when the app is ran first time. it takes two arguments
1.  useEffect(()=>{}) every time the component is rendered.
2.  useEffect(()=>{}, [])  run the arrow fxn only once when first rendered.
3.  useEffect(()=>{}, [value]), run at first render and every time the 'value' chnges

useEffect(()=>{
        searchApi('pasta');
      },[]);


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
anytime it feels like the view is cutting off the screen we will use flex:1
also , view can sometime expand or shrink , so what we can do is to use <></> instead of view which can solve a lot of our problems.



Navigation: if we want to go to a screen from a particular screen we have to use the props.navigate , but what if this screen is no the home screen
then what we do is pass on this navigation as a prop to its childs so that we can use it from over there.

Or another thing that could be done is 
import {withNavigation}  from 'react-navigation';
we can use withNavigation function that resturns special version of our component that has navigation .
<TouchableOpacity onPress={()=> navigation.navigate('ResultsShow', {id:item.id})}>
{/*when our results show screen is displayer it woll have an extra info of item id*/ }



CONTEXTS:  SImilar to props. by using props we can send info from parent to immediate child and to tranfer info to grandchild we hve to first send info
to child and from child to grandchild.
this is not the case with props.
However it is a lil bit complicated to set up and has some specual terms

